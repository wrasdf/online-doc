openapi: 3.1.0
info:
  title: Online Collaborative Document System API
  version: 1.0.0
  description: REST API for creating, managing, and collaborating on documents in real-time
  contact:
    name: API Support
    email: support@online-doc.example.com

servers:
  - url: http://localhost:8000/api/v1
    description: Local development
  - url: https://api.online-doc.example.com/api/v1
    description: Production

tags:
  - name: Authentication
    description: User authentication and session management
  - name: Users
    description: User profile management
  - name: Documents
    description: Document CRUD operations
  - name: Sharing
    description: Document sharing and access control
  - name: Collaboration
    description: Real-time collaboration endpoints

paths:
  # Authentication Endpoints
  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          description: Email or username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /auth/logout:
    post:
      tags: [Authentication]
      summary: Logout user
      operationId: logoutUser
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Logout successful
        '401':
          $ref: '#/components/responses/Unauthorized'

  # User Endpoints
  /users/me:
    get:
      tags: [Users]
      summary: Get current user profile
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  # Document Endpoints
  /documents:
    get:
      tags: [Documents]
      summary: List documents (owned and shared)
      operationId: listDocuments
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
            maximum: 100
        - name: sort
          in: query
          schema:
            type: string
            enum: [created_at, updated_at, title]
            default: updated_at
        - name: order
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
      responses:
        '200':
          description: Document list retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentListResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Documents]
      summary: Create a new document
      operationId: createDocument
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDocumentRequest'
      responses:
        '201':
          description: Document created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /documents/{documentId}:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags: [Documents]
      summary: Get document by ID
      operationId: getDocument
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Document retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDetailResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Documents]
      summary: Update document metadata
      operationId: updateDocument
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'
      responses:
        '200':
          description: Document updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    delete:
      tags: [Documents]
      summary: Delete document
      operationId: deleteDocument
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Document deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{documentId}/content:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags: [Documents]
      summary: Get document content (plain text or Yjs state)
      operationId: getDocumentContent
      security:
        - bearerAuth: []
      parameters:
        - name: format
          in: query
          schema:
            type: string
            enum: [text, yjs]
            default: text
      responses:
        '200':
          description: Document content retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentContentResponse'
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Documents]
      summary: Update document content (auto-save)
      operationId: updateDocumentContent
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContentRequest'
      responses:
        '200':
          description: Content updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          description: Version conflict (optimistic locking)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # Sharing Endpoints
  /documents/{documentId}/share:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    post:
      tags: [Sharing]
      summary: Share document with users
      operationId: shareDocument
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareDocumentRequest'
      responses:
        '200':
          description: Document shared successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{documentId}/share/{userId}:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: userId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    delete:
      tags: [Sharing]
      summary: Revoke document access
      operationId: revokeAccess
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Access revoked successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{documentId}/collaborators:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags: [Collaboration]
      summary: Get list of collaborators with access
      operationId: getCollaborators
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Collaborators list retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollaboratorsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

  /documents/{documentId}/sessions:
    parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
          format: uuid

    get:
      tags: [Collaboration]
      summary: Get active edit sessions
      operationId: getActiveSessions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Active sessions retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActiveSessionsResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

# WebSocket endpoint (not OpenAPI, documented separately)
# ws://localhost:8000/ws/documents/{documentId}?token={jwt_token}

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # Authentication Schemas
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 100
          pattern: '^[a-zA-Z0-9_-]+$'
        email:
          type: string
          format: email
          maxLength: 255
        password:
          type: string
          minLength: 8
          maxLength: 255

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    LoginResponse:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
          example: bearer
        expires_in:
          type: integer
          example: 3600
        user:
          $ref: '#/components/schemas/UserResponse'

    # User Schemas
    UserResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        created_at:
          type: string
          format: date-time

    # Document Schemas
    CreateDocumentRequest:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        content:
          type: string
          default: ''

    UpdateDocumentRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255

    UpdateContentRequest:
      type: object
      required:
        - version
      properties:
        content:
          type: string
        yjs_state:
          type: string
          format: byte
          description: Base64-encoded Yjs binary state
        version:
          type: integer
          description: Current version for optimistic locking

    DocumentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        owner_id:
          type: string
          format: uuid
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        version:
          type: integer
        is_owner:
          type: boolean
        access_type:
          type: string
          enum: [owner, editor]

    DocumentDetailResponse:
      allOf:
        - $ref: '#/components/schemas/DocumentResponse'
        - type: object
          properties:
            owner:
              $ref: '#/components/schemas/UserResponse'
            collaborators_count:
              type: integer

    DocumentContentResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        content:
          type: string
        version:
          type: integer
        updated_at:
          type: string
          format: date-time

    DocumentListResponse:
      type: object
      properties:
        documents:
          type: array
          items:
            $ref: '#/components/schemas/DocumentResponse'
        pagination:
          $ref: '#/components/schemas/PaginationInfo'

    # Sharing Schemas
    ShareDocumentRequest:
      type: object
      required:
        - user_ids
      properties:
        user_ids:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1

    ShareResponse:
      type: object
      properties:
        document_id:
          type: string
          format: uuid
        shared_with:
          type: array
          items:
            $ref: '#/components/schemas/CollaboratorInfo'

    CollaboratorInfo:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
        access_type:
          type: string
          enum: [owner, editor]
        granted_at:
          type: string
          format: date-time

    CollaboratorsResponse:
      type: object
      properties:
        document_id:
          type: string
          format: uuid
        collaborators:
          type: array
          items:
            $ref: '#/components/schemas/CollaboratorInfo'

    # Collaboration Schemas
    ActiveSession:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        username:
          type: string
        cursor_position:
          type: integer
        cursor_color:
          type: string
          pattern: '^#[0-9A-Fa-f]{6}$'
        connection_status:
          type: string
          enum: [connected, idle, disconnected]
        last_activity:
          type: string
          format: date-time

    ActiveSessionsResponse:
      type: object
      properties:
        document_id:
          type: string
          format: uuid
        sessions:
          type: array
          items:
            $ref: '#/components/schemas/ActiveSession'

    # Common Schemas
    PaginationInfo:
      type: object
      properties:
        page:
          type: integer
        limit:
          type: integer
        total_pages:
          type: integer
        total_items:
          type: integer

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
